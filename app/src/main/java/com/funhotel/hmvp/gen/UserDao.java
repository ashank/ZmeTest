package com.funhotel.hmvp.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.funhotel.hmvp.model.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Number = new Property(0, Long.class, "number", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property RealName = new Property(3, String.class, "realName", false, "REAL_NAME");
        public final static Property Age = new Property(4, int.class, "age", false, "AGE");
        public final static Property Sex = new Property(5, int.class, "sex", false, "SEX");
        public final static Property TelePhone = new Property(6, String.class, "telePhone", false, "TELE_PHONE");
        public final static Property Eamail = new Property(7, String.class, "eamail", false, "EAMAIL");
        public final static Property Password = new Property(8, String.class, "password", false, "PASSWORD");
        public final static Property Birthday = new Property(9, String.class, "birthday", false, "BIRTHDAY");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: number
                "\"ID\" TEXT," + // 1: id
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"REAL_NAME\" TEXT," + // 3: realName
                "\"AGE\" INTEGER NOT NULL ," + // 4: age
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"TELE_PHONE\" TEXT," + // 6: telePhone
                "\"EAMAIL\" TEXT," + // 7: eamail
                "\"PASSWORD\" TEXT," + // 8: password
                "\"BIRTHDAY\" TEXT);"); // 9: birthday
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
        stmt.bindLong(5, entity.getAge());
        stmt.bindLong(6, entity.getSex());
 
        String telePhone = entity.getTelePhone();
        if (telePhone != null) {
            stmt.bindString(7, telePhone);
        }
 
        String eamail = entity.getEamail();
        if (eamail != null) {
            stmt.bindString(8, eamail);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String realName = entity.getRealName();
        if (realName != null) {
            stmt.bindString(4, realName);
        }
        stmt.bindLong(5, entity.getAge());
        stmt.bindLong(6, entity.getSex());
 
        String telePhone = entity.getTelePhone();
        if (telePhone != null) {
            stmt.bindString(7, telePhone);
        }
 
        String eamail = entity.getEamail();
        if (eamail != null) {
            stmt.bindString(8, eamail);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(9, password);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(10, birthday);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // number
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // realName
            cursor.getInt(offset + 4), // age
            cursor.getInt(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // telePhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // eamail
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // password
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // birthday
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setNumber(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRealName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAge(cursor.getInt(offset + 4));
        entity.setSex(cursor.getInt(offset + 5));
        entity.setTelePhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEamail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBirthday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setNumber(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
