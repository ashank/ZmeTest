package com.funhotel.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.funhotel.greendao.entity.EpgData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EPG_DATA".
*/
public class EpgDataDao extends AbstractDao<EpgData, Integer> {

    public static final String TABLENAME = "EPG_DATA";

    /**
     * Properties of entity EpgData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ResourceId = new Property(2, int.class, "resourceId", false, "RESOURCE_ID");
        public final static Property ResourceName = new Property(3, String.class, "resourceName", false, "RESOURCE_NAME");
        public final static Property Position = new Property(4, int.class, "position", false, "POSITION");
        public final static Property Text = new Property(5, String.class, "text", false, "TEXT");
        public final static Property Href = new Property(6, String.class, "href", false, "HREF");
        public final static Property BeforeImgUrl = new Property(7, String.class, "beforeImgUrl", false, "BEFORE_IMG_URL");
        public final static Property BackImgUrl = new Property(8, String.class, "backImgUrl", false, "BACK_IMG_URL");
        public final static Property MediaUrl = new Property(9, String.class, "mediaUrl", false, "MEDIA_URL");
        public final static Property ShowType = new Property(10, int.class, "showType", false, "SHOW_TYPE");
        public final static Property Sort = new Property(11, int.class, "sort", false, "SORT");
        public final static Property Type = new Property(12, String.class, "type", false, "TYPE");
        public final static Property TemplateId = new Property(13, int.class, "templateId", false, "TEMPLATE_ID");
        public final static Property TemplateName = new Property(14, String.class, "templateName", false, "TEMPLATE_NAME");
        public final static Property Extention1 = new Property(15, String.class, "extention1", false, "EXTENTION1");
        public final static Property Extention2 = new Property(16, String.class, "extention2", false, "EXTENTION2");
        public final static Property AdPositionCode = new Property(17, String.class, "adPositionCode", false, "AD_POSITION_CODE");
        public final static Property ApkHref = new Property(18, String.class, "apkHref", false, "APK_HREF");
        public final static Property Cls = new Property(19, String.class, "cls", false, "CLS");
        public final static Property Pck = new Property(20, String.class, "pck", false, "PCK");
    };


    public EpgDataDao(DaoConfig config) {
        super(config);
    }
    
    public EpgDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EPG_DATA\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"RESOURCE_ID\" INTEGER NOT NULL ," + // 2: resourceId
                "\"RESOURCE_NAME\" TEXT," + // 3: resourceName
                "\"POSITION\" INTEGER NOT NULL ," + // 4: position
                "\"TEXT\" TEXT," + // 5: text
                "\"HREF\" TEXT," + // 6: href
                "\"BEFORE_IMG_URL\" TEXT," + // 7: beforeImgUrl
                "\"BACK_IMG_URL\" TEXT," + // 8: backImgUrl
                "\"MEDIA_URL\" TEXT," + // 9: mediaUrl
                "\"SHOW_TYPE\" INTEGER NOT NULL ," + // 10: showType
                "\"SORT\" INTEGER NOT NULL ," + // 11: sort
                "\"TYPE\" TEXT," + // 12: type
                "\"TEMPLATE_ID\" INTEGER NOT NULL ," + // 13: templateId
                "\"TEMPLATE_NAME\" TEXT," + // 14: templateName
                "\"EXTENTION1\" TEXT," + // 15: extention1
                "\"EXTENTION2\" TEXT," + // 16: extention2
                "\"AD_POSITION_CODE\" TEXT," + // 17: adPositionCode
                "\"APK_HREF\" TEXT," + // 18: apkHref
                "\"CLS\" TEXT," + // 19: cls
                "\"PCK\" TEXT);"); // 20: pck
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EPG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EpgData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getResourceId());
 
        String resourceName = entity.getResourceName();
        if (resourceName != null) {
            stmt.bindString(4, resourceName);
        }
        stmt.bindLong(5, entity.getPosition());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
 
        String href = entity.getHref();
        if (href != null) {
            stmt.bindString(7, href);
        }
 
        String beforeImgUrl = entity.getBeforeImgUrl();
        if (beforeImgUrl != null) {
            stmt.bindString(8, beforeImgUrl);
        }
 
        String backImgUrl = entity.getBackImgUrl();
        if (backImgUrl != null) {
            stmt.bindString(9, backImgUrl);
        }
 
        String mediaUrl = entity.getMediaUrl();
        if (mediaUrl != null) {
            stmt.bindString(10, mediaUrl);
        }
        stmt.bindLong(11, entity.getShowType());
        stmt.bindLong(12, entity.getSort());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
        stmt.bindLong(14, entity.getTemplateId());
 
        String templateName = entity.getTemplateName();
        if (templateName != null) {
            stmt.bindString(15, templateName);
        }
 
        String extention1 = entity.getExtention1();
        if (extention1 != null) {
            stmt.bindString(16, extention1);
        }
 
        String extention2 = entity.getExtention2();
        if (extention2 != null) {
            stmt.bindString(17, extention2);
        }
 
        String adPositionCode = entity.getAdPositionCode();
        if (adPositionCode != null) {
            stmt.bindString(18, adPositionCode);
        }
 
        String apkHref = entity.getApkHref();
        if (apkHref != null) {
            stmt.bindString(19, apkHref);
        }
 
        String cls = entity.getCls();
        if (cls != null) {
            stmt.bindString(20, cls);
        }
 
        String pck = entity.getPck();
        if (pck != null) {
            stmt.bindString(21, pck);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EpgData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getResourceId());
 
        String resourceName = entity.getResourceName();
        if (resourceName != null) {
            stmt.bindString(4, resourceName);
        }
        stmt.bindLong(5, entity.getPosition());
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(6, text);
        }
 
        String href = entity.getHref();
        if (href != null) {
            stmt.bindString(7, href);
        }
 
        String beforeImgUrl = entity.getBeforeImgUrl();
        if (beforeImgUrl != null) {
            stmt.bindString(8, beforeImgUrl);
        }
 
        String backImgUrl = entity.getBackImgUrl();
        if (backImgUrl != null) {
            stmt.bindString(9, backImgUrl);
        }
 
        String mediaUrl = entity.getMediaUrl();
        if (mediaUrl != null) {
            stmt.bindString(10, mediaUrl);
        }
        stmt.bindLong(11, entity.getShowType());
        stmt.bindLong(12, entity.getSort());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
        stmt.bindLong(14, entity.getTemplateId());
 
        String templateName = entity.getTemplateName();
        if (templateName != null) {
            stmt.bindString(15, templateName);
        }
 
        String extention1 = entity.getExtention1();
        if (extention1 != null) {
            stmt.bindString(16, extention1);
        }
 
        String extention2 = entity.getExtention2();
        if (extention2 != null) {
            stmt.bindString(17, extention2);
        }
 
        String adPositionCode = entity.getAdPositionCode();
        if (adPositionCode != null) {
            stmt.bindString(18, adPositionCode);
        }
 
        String apkHref = entity.getApkHref();
        if (apkHref != null) {
            stmt.bindString(19, apkHref);
        }
 
        String cls = entity.getCls();
        if (cls != null) {
            stmt.bindString(20, cls);
        }
 
        String pck = entity.getPck();
        if (pck != null) {
            stmt.bindString(21, pck);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public EpgData readEntity(Cursor cursor, int offset) {
        EpgData entity = new EpgData( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // resourceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // resourceName
            cursor.getInt(offset + 4), // position
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // text
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // href
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // beforeImgUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // backImgUrl
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mediaUrl
            cursor.getInt(offset + 10), // showType
            cursor.getInt(offset + 11), // sort
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // type
            cursor.getInt(offset + 13), // templateId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // templateName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // extention1
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // extention2
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // adPositionCode
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // apkHref
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // cls
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // pck
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EpgData entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setResourceId(cursor.getInt(offset + 2));
        entity.setResourceName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosition(cursor.getInt(offset + 4));
        entity.setText(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHref(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBeforeImgUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBackImgUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMediaUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShowType(cursor.getInt(offset + 10));
        entity.setSort(cursor.getInt(offset + 11));
        entity.setType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTemplateId(cursor.getInt(offset + 13));
        entity.setTemplateName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setExtention1(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setExtention2(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setAdPositionCode(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setApkHref(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCls(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setPck(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(EpgData entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(EpgData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
